//실행 컨텍스트와 호이스팅

        //스택
//출입구가 하나인 우물 형태의 데이터 구조이다.
//출입구가 하나이므로 입력의 순서와 출력의 순서가 정반대이다.
//입력순서 a > b > c > d
//출력순서 d > c > b > a


        //큐
//양방향 출입이 가능한 파이프 형태의 데이터 구조이다.
//양방향 출입이 가능하므로 입력의 순서와 출력의 순서가 같다.
//입력순서 a < b < c < d
//출력순서 a < b < c < d



    //자바스크립트의 동작 원리
        //실행 컨텍스트
//실행할 코드에 제공할 환경 정보를 모아둔 개체이다.
//자바스크립트는 동일한 환경에 있는 코드들을 실행할 때 필요한 환경 정보를 모아 컨텍스트를 구성하고, 해당 컨텍스트를 콜스택에 쌓아둔다.
//함수를 생성해 주는 것이 실행 컨텍스트를 생성하기 위한 가장 좋은 방법이다.

//실행 컨텍스트의 구성
//variablesEnviroment : 식별자의 정보, 선언 위치, 외부 환경 정보를 담고 있다.
//lexicalEvniroment: 처음에는 variablesEnviroment와 같지만 변경사항이 생기면 변경사항을 반영한다.
//thisBinding : 식별자가 바라봐야 할 대상객체
//실행 컨텍스트를 생성 시에 variableEnviroment에 정보를 담은 후에 LexicalEnviroment에 복사해준다.
//최종적으로 LexicalEnviroment에 정보가 담기므로 주로 사용해준다.


        //호이스팅
//자바스크립트는 실행 컨텍스트를 생성하면서 코드에 관련한 식별자, 환경 정보 등을 수집하여 코드가 실행되지 않았음에도 불구하고, 
//자바스크립트 엔진은 환경에 속한 변수명들을 모두 알고 있다. 이러한 특징을 호이스팅이라고 한다.



        //***자바스크립트의 동작 과정***
//코드를 훑으며 함수를 만나면 실행 컨텍스트를 생성한다.
//생성한 컨텍스트 안에 해당 코드에 대한 식별자 정보, 선언 위치, 외부 환경 정보를 수집해서 넣는다(이 과정에서 코드가 실행되지 않았음에도 변수, 함수명을 알고 있게 된다.)
//실행 컨텍스트를 콜스택에 쌓아둔다.


        //***호이스팅 한줄 정리***
//변수명, 함수명을 위로 끌어올려두고 코드를 실행한다.
//코드가 실행되기 이전, 실행 컨텍스트의 영향으로 변수명과 함수명을 모두 알고 있는 것이다.